// source: world_mix.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var act_jobs_pb = require('./act_jobs_pb.js');
goog.object.extend(proto, act_jobs_pb);
var point_pb = require('./point_pb.js');
goog.object.extend(proto, point_pb);
goog.exportSymbol('proto.Object', null, global);
goog.exportSymbol('proto.OgmPoint', null, global);
goog.exportSymbol('proto.PlanningPoint', null, global);
goog.exportSymbol('proto.PlanningResult', null, global);
goog.exportSymbol('proto.PlanningResult.Response', null, global);
goog.exportSymbol('proto.TodayData', null, global);
goog.exportSymbol('proto.Wall', null, global);
goog.exportSymbol('proto.WheelAngle', null, global);
goog.exportSymbol('proto.WheelOdometer', null, global);
goog.exportSymbol('proto.WheelSpeed', null, global);
goog.exportSymbol('proto.World', null, global);
goog.exportSymbol('proto.WorldMix', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WheelSpeed = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WheelSpeed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.WheelSpeed.displayName = 'proto.WheelSpeed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WheelAngle = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WheelAngle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.WheelAngle.displayName = 'proto.WheelAngle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WheelOdometer = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WheelOdometer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.WheelOdometer.displayName = 'proto.WheelOdometer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OgmPoint = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OgmPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.OgmPoint.displayName = 'proto.OgmPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Wall = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Wall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.Wall.displayName = 'proto.Wall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TodayData = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TodayData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.TodayData.displayName = 'proto.TodayData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Object = function (opt_data) {
    jspb.Message.initialize(
        this,
        opt_data,
        0,
        -1,
        proto.Object.repeatedFields_,
        null,
    );
};
goog.inherits(proto.Object, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.Object.displayName = 'proto.Object';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlanningPoint = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlanningPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.PlanningPoint.displayName = 'proto.PlanningPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlanningResult = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlanningResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.PlanningResult.displayName = 'proto.PlanningResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.World = function (opt_data) {
    jspb.Message.initialize(
        this,
        opt_data,
        0,
        -1,
        proto.World.repeatedFields_,
        null,
    );
};
goog.inherits(proto.World, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.World.displayName = 'proto.World';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WorldMix = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WorldMix, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.WorldMix.displayName = 'proto.WorldMix';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.WheelSpeed.prototype.toObject = function (opt_includeInstance) {
        return proto.WheelSpeed.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.WheelSpeed} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.WheelSpeed.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                speed: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    1,
                    0.0,
                ),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WheelSpeed}
 */
proto.WheelSpeed.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.WheelSpeed();
    return proto.WheelSpeed.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WheelSpeed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WheelSpeed}
 */
proto.WheelSpeed.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setSpeed(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WheelSpeed.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.WheelSpeed.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WheelSpeed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WheelSpeed.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSpeed();
    if (f !== 0.0) {
        writer.writeDouble(1, f);
    }
};

/**
 * optional double speed = 1;
 * @return {number}
 */
proto.WheelSpeed.prototype.getSpeed = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.WheelSpeed} returns this
 */
proto.WheelSpeed.prototype.setSpeed = function (value) {
    return jspb.Message.setProto3FloatField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.WheelAngle.prototype.toObject = function (opt_includeInstance) {
        return proto.WheelAngle.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.WheelAngle} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.WheelAngle.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                angle: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    1,
                    0.0,
                ),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WheelAngle}
 */
proto.WheelAngle.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.WheelAngle();
    return proto.WheelAngle.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WheelAngle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WheelAngle}
 */
proto.WheelAngle.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setAngle(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WheelAngle.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.WheelAngle.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WheelAngle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WheelAngle.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getAngle();
    if (f !== 0.0) {
        writer.writeDouble(1, f);
    }
};

/**
 * optional double angle = 1;
 * @return {number}
 */
proto.WheelAngle.prototype.getAngle = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.WheelAngle} returns this
 */
proto.WheelAngle.prototype.setAngle = function (value) {
    return jspb.Message.setProto3FloatField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.WheelOdometer.prototype.toObject = function (opt_includeInstance) {
        return proto.WheelOdometer.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.WheelOdometer} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.WheelOdometer.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                pressure: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    1,
                    0.0,
                ),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WheelOdometer}
 */
proto.WheelOdometer.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.WheelOdometer();
    return proto.WheelOdometer.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WheelOdometer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WheelOdometer}
 */
proto.WheelOdometer.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setPressure(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WheelOdometer.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.WheelOdometer.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WheelOdometer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WheelOdometer.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPressure();
    if (f !== 0.0) {
        writer.writeDouble(1, f);
    }
};

/**
 * optional double pressure = 1;
 * @return {number}
 */
proto.WheelOdometer.prototype.getPressure = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.WheelOdometer} returns this
 */
proto.WheelOdometer.prototype.setPressure = function (value) {
    return jspb.Message.setProto3FloatField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.OgmPoint.prototype.toObject = function (opt_includeInstance) {
        return proto.OgmPoint.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.OgmPoint} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.OgmPoint.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                type: jspb.Message.getFieldWithDefault(msg, 1, 0),
                x: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
                y: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OgmPoint}
 */
proto.OgmPoint.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.OgmPoint();
    return proto.OgmPoint.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OgmPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OgmPoint}
 */
proto.OgmPoint.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setType(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setX(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setY(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OgmPoint.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.OgmPoint.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OgmPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OgmPoint.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getType();
    if (f !== 0) {
        writer.writeInt32(1, f);
    }
    f = message.getX();
    if (f !== 0.0) {
        writer.writeDouble(2, f);
    }
    f = message.getY();
    if (f !== 0.0) {
        writer.writeDouble(3, f);
    }
};

/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.OgmPoint.prototype.getType = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.OgmPoint} returns this
 */
proto.OgmPoint.prototype.setType = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional double x = 2;
 * @return {number}
 */
proto.OgmPoint.prototype.getX = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.OgmPoint} returns this
 */
proto.OgmPoint.prototype.setX = function (value) {
    return jspb.Message.setProto3FloatField(this, 2, value);
};

/**
 * optional double y = 3;
 * @return {number}
 */
proto.OgmPoint.prototype.getY = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.OgmPoint} returns this
 */
proto.OgmPoint.prototype.setY = function (value) {
    return jspb.Message.setProto3FloatField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.Wall.prototype.toObject = function (opt_includeInstance) {
        return proto.Wall.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.Wall} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.Wall.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                type: jspb.Message.getFieldWithDefault(msg, 1, 0),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Wall}
 */
proto.Wall.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.Wall();
    return proto.Wall.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Wall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Wall}
 */
proto.Wall.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setType(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Wall.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.Wall.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Wall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Wall.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getType();
    if (f !== 0) {
        writer.writeInt32(1, f);
    }
};

/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.Wall.prototype.getType = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.Wall} returns this
 */
proto.Wall.prototype.setType = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.TodayData.prototype.toObject = function (opt_includeInstance) {
        return proto.TodayData.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.TodayData} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.TodayData.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                mileage: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    1,
                    0.0,
                ),
                consumePower: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    2,
                    0.0,
                ),
                align: jspb.Message.getFieldWithDefault(msg, 3, 0),
                workDuration: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    4,
                    0.0,
                ),
                runDuration: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    5,
                    0.0,
                ),
                alignDuration: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    6,
                    0.0,
                ),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TodayData}
 */
proto.TodayData.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.TodayData();
    return proto.TodayData.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TodayData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TodayData}
 */
proto.TodayData.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setMileage(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setConsumePower(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setAlign(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setWorkDuration(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setRunDuration(value);
                break;
            case 6:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setAlignDuration(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TodayData.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.TodayData.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TodayData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TodayData.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getMileage();
    if (f !== 0.0) {
        writer.writeDouble(1, f);
    }
    f = message.getConsumePower();
    if (f !== 0.0) {
        writer.writeDouble(2, f);
    }
    f = message.getAlign();
    if (f !== 0) {
        writer.writeInt32(3, f);
    }
    f = message.getWorkDuration();
    if (f !== 0.0) {
        writer.writeDouble(4, f);
    }
    f = message.getRunDuration();
    if (f !== 0.0) {
        writer.writeDouble(5, f);
    }
    f = message.getAlignDuration();
    if (f !== 0.0) {
        writer.writeDouble(6, f);
    }
};

/**
 * optional double mileage = 1;
 * @return {number}
 */
proto.TodayData.prototype.getMileage = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.TodayData} returns this
 */
proto.TodayData.prototype.setMileage = function (value) {
    return jspb.Message.setProto3FloatField(this, 1, value);
};

/**
 * optional double consume_power = 2;
 * @return {number}
 */
proto.TodayData.prototype.getConsumePower = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.TodayData} returns this
 */
proto.TodayData.prototype.setConsumePower = function (value) {
    return jspb.Message.setProto3FloatField(this, 2, value);
};

/**
 * optional int32 align = 3;
 * @return {number}
 */
proto.TodayData.prototype.getAlign = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/**
 * @param {number} value
 * @return {!proto.TodayData} returns this
 */
proto.TodayData.prototype.setAlign = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional double work_duration = 4;
 * @return {number}
 */
proto.TodayData.prototype.getWorkDuration = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.TodayData} returns this
 */
proto.TodayData.prototype.setWorkDuration = function (value) {
    return jspb.Message.setProto3FloatField(this, 4, value);
};

/**
 * optional double run_duration = 5;
 * @return {number}
 */
proto.TodayData.prototype.getRunDuration = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.TodayData} returns this
 */
proto.TodayData.prototype.setRunDuration = function (value) {
    return jspb.Message.setProto3FloatField(this, 5, value);
};

/**
 * optional double align_duration = 6;
 * @return {number}
 */
proto.TodayData.prototype.getAlignDuration = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.TodayData} returns this
 */
proto.TodayData.prototype.setAlignDuration = function (value) {
    return jspb.Message.setProto3FloatField(this, 6, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Object.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.Object.prototype.toObject = function (opt_includeInstance) {
        return proto.Object.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.Object} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.Object.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                pointsList: jspb.Message.toObjectList(
                    msg.getPointsList(),
                    point_pb.Point.toObject,
                    includeInstance,
                ),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Object}
 */
proto.Object.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.Object();
    return proto.Object.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Object} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Object}
 */
proto.Object.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new point_pb.Point();
                reader.readMessage(
                    value,
                    point_pb.Point.deserializeBinaryFromReader,
                );
                msg.addPoints(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Object.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.Object.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Object} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Object.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPointsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            1,
            f,
            point_pb.Point.serializeBinaryToWriter,
        );
    }
};

/**
 * repeated Point points = 1;
 * @return {!Array<!proto.Point>}
 */
proto.Object.prototype.getPointsList = function () {
    return /** @type{!Array<!proto.Point>} */ (
        jspb.Message.getRepeatedWrapperField(this, point_pb.Point, 1)
    );
};

/**
 * @param {!Array<!proto.Point>} value
 * @return {!proto.Object} returns this
 */
proto.Object.prototype.setPointsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.Point=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Point}
 */
proto.Object.prototype.addPoints = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
        this,
        1,
        opt_value,
        proto.Point,
        opt_index,
    );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Object} returns this
 */
proto.Object.prototype.clearPointsList = function () {
    return this.setPointsList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.PlanningPoint.prototype.toObject = function (opt_includeInstance) {
        return proto.PlanningPoint.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.PlanningPoint} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.PlanningPoint.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
                y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
                theta: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    3,
                    0.0,
                ),
                type: jspb.Message.getFieldWithDefault(msg, 4, 0),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlanningPoint}
 */
proto.PlanningPoint.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.PlanningPoint();
    return proto.PlanningPoint.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlanningPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlanningPoint}
 */
proto.PlanningPoint.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setX(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setY(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setTheta(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setType(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlanningPoint.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.PlanningPoint.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlanningPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlanningPoint.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getX();
    if (f !== 0.0) {
        writer.writeDouble(1, f);
    }
    f = message.getY();
    if (f !== 0.0) {
        writer.writeDouble(2, f);
    }
    f = message.getTheta();
    if (f !== 0.0) {
        writer.writeDouble(3, f);
    }
    f = message.getType();
    if (f !== 0) {
        writer.writeInt32(4, f);
    }
};

/**
 * optional double x = 1;
 * @return {number}
 */
proto.PlanningPoint.prototype.getX = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.PlanningPoint} returns this
 */
proto.PlanningPoint.prototype.setX = function (value) {
    return jspb.Message.setProto3FloatField(this, 1, value);
};

/**
 * optional double y = 2;
 * @return {number}
 */
proto.PlanningPoint.prototype.getY = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.PlanningPoint} returns this
 */
proto.PlanningPoint.prototype.setY = function (value) {
    return jspb.Message.setProto3FloatField(this, 2, value);
};

/**
 * optional double theta = 3;
 * @return {number}
 */
proto.PlanningPoint.prototype.getTheta = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.PlanningPoint} returns this
 */
proto.PlanningPoint.prototype.setTheta = function (value) {
    return jspb.Message.setProto3FloatField(this, 3, value);
};

/**
 * optional int32 type = 4;
 * @return {number}
 */
proto.PlanningPoint.prototype.getType = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/**
 * @param {number} value
 * @return {!proto.PlanningPoint} returns this
 */
proto.PlanningPoint.prototype.setType = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.PlanningResult.prototype.toObject = function (opt_includeInstance) {
        return proto.PlanningResult.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.PlanningResult} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.PlanningResult.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                id: jspb.Message.getFieldWithDefault(msg, 1, 0),
                response: jspb.Message.getFieldWithDefault(msg, 2, 0),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlanningResult}
 */
proto.PlanningResult.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.PlanningResult();
    return proto.PlanningResult.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlanningResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlanningResult}
 */
proto.PlanningResult.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setId(value);
                break;
            case 2:
                var value = /** @type {!proto.PlanningResult.Response} */ (
                    reader.readEnum()
                );
                msg.setResponse(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlanningResult.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.PlanningResult.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlanningResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlanningResult.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getId();
    if (f !== 0) {
        writer.writeInt32(1, f);
    }
    f = message.getResponse();
    if (f !== 0.0) {
        writer.writeEnum(2, f);
    }
};

/**
 * @enum {number}
 */
proto.PlanningResult.Response = {
    UNKNOWN: 0,
    PLANNING_SUCCESS: 1,
    PLANNING_FAIL: 2,
    EXECUTE_SUCCESS: 3,
    EXECUTE_FAIL: 4,
};

/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.PlanningResult.prototype.getId = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.PlanningResult} returns this
 */
proto.PlanningResult.prototype.setId = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional Response response = 2;
 * @return {!proto.PlanningResult.Response}
 */
proto.PlanningResult.prototype.getResponse = function () {
    return /** @type {!proto.PlanningResult.Response} */ (
        jspb.Message.getFieldWithDefault(this, 2, 0)
    );
};

/**
 * @param {!proto.PlanningResult.Response} value
 * @return {!proto.PlanningResult} returns this
 */
proto.PlanningResult.prototype.setResponse = function (value) {
    return jspb.Message.setProto3EnumField(this, 2, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.World.repeatedFields_ = [6, 7, 8, 21, 31, 32, 36];

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.World.prototype.toObject = function (opt_includeInstance) {
        return proto.World.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.World} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.World.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                cheId: jspb.Message.getFieldWithDefault(msg, 1, ''),
                x: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
                y: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
                yaw: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
                odometer: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    5,
                    0.0,
                ),
                wheelSpeedList: jspb.Message.toObjectList(
                    msg.getWheelSpeedList(),
                    proto.WheelSpeed.toObject,
                    includeInstance,
                ),
                wheelOdometerList: jspb.Message.toObjectList(
                    msg.getWheelOdometerList(),
                    proto.WheelOdometer.toObject,
                    includeInstance,
                ),
                wheelAngleList: jspb.Message.toObjectList(
                    msg.getWheelAngleList(),
                    proto.WheelAngle.toObject,
                    includeInstance,
                ),
                gy: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
                currentThrottle: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    10,
                    0.0,
                ),
                currentBrake: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    11,
                    0.0,
                ),
                currentSpeed: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    12,
                    0.0,
                ),
                turnLightStatus: jspb.Message.getFieldWithDefault(msg, 13, 0),
                vehicleErrorStatus:
                    jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
                emergencyStopStatus:
                    jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
                autoDriverStatus: jspb.Message.getFieldWithDefault(msg, 16, 0),
                throttle: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    17,
                    0.0,
                ),
                brake: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    18,
                    0.0,
                ),
                gear: jspb.Message.getFieldWithDefault(msg, 19, ''),
                finalDistance: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    20,
                    0.0,
                ),
                wallsList: jspb.Message.toObjectList(
                    msg.getWallsList(),
                    proto.Wall.toObject,
                    includeInstance,
                ),
                gpsStatus: jspb.Message.getFieldWithDefault(msg, 22, 0),
                rtSpeed: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    23,
                    0.0,
                ),
                finalSpeed: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    24,
                    0.0,
                ),
                globalPathAt: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    25,
                    0.0,
                ),
                leftFrontAt: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    26,
                    0.0,
                ),
                rightFrontAt: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    27,
                    0.0,
                ),
                leftBehindAt: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    28,
                    0.0,
                ),
                rightBehindAt: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    29,
                    0.0,
                ),
                planningCmdAt: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    30,
                    0.0,
                ),
                ogmPointsList: jspb.Message.toObjectList(
                    msg.getOgmPointsList(),
                    proto.OgmPoint.toObject,
                    includeInstance,
                ),
                objectsList: jspb.Message.toObjectList(
                    msg.getObjectsList(),
                    proto.Object.toObject,
                    includeInstance,
                ),
                stateFlow: jspb.Message.getFieldWithDefault(msg, 33, ''),
                soc: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    34,
                    0.0,
                ),
                stop: jspb.Message.getBooleanFieldWithDefault(msg, 35, false),
                planningPointsList: jspb.Message.toObjectList(
                    msg.getPlanningPointsList(),
                    proto.PlanningPoint.toObject,
                    includeInstance,
                ),
                planningResult:
                    (f = msg.getPlanningResult()) &&
                    proto.PlanningResult.toObject(includeInstance, f),
                updatedAt: jspb.Message.getFloatingPointFieldWithDefault(
                    msg,
                    38,
                    0.0,
                ),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.World}
 */
proto.World.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.World();
    return proto.World.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.World} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.World}
 */
proto.World.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setCheId(value);
                break;
            case 2:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setX(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setY(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setYaw(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setOdometer(value);
                break;
            case 6:
                var value = new proto.WheelSpeed();
                reader.readMessage(
                    value,
                    proto.WheelSpeed.deserializeBinaryFromReader,
                );
                msg.addWheelSpeed(value);
                break;
            case 7:
                var value = new proto.WheelOdometer();
                reader.readMessage(
                    value,
                    proto.WheelOdometer.deserializeBinaryFromReader,
                );
                msg.addWheelOdometer(value);
                break;
            case 8:
                var value = new proto.WheelAngle();
                reader.readMessage(
                    value,
                    proto.WheelAngle.deserializeBinaryFromReader,
                );
                msg.addWheelAngle(value);
                break;
            case 9:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setGy(value);
                break;
            case 10:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setCurrentThrottle(value);
                break;
            case 11:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setCurrentBrake(value);
                break;
            case 12:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setCurrentSpeed(value);
                break;
            case 13:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setTurnLightStatus(value);
                break;
            case 14:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setVehicleErrorStatus(value);
                break;
            case 15:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setEmergencyStopStatus(value);
                break;
            case 16:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setAutoDriverStatus(value);
                break;
            case 17:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setThrottle(value);
                break;
            case 18:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setBrake(value);
                break;
            case 19:
                var value = /** @type {string} */ (reader.readString());
                msg.setGear(value);
                break;
            case 20:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setFinalDistance(value);
                break;
            case 21:
                var value = new proto.Wall();
                reader.readMessage(
                    value,
                    proto.Wall.deserializeBinaryFromReader,
                );
                msg.addWalls(value);
                break;
            case 22:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setGpsStatus(value);
                break;
            case 23:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setRtSpeed(value);
                break;
            case 24:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setFinalSpeed(value);
                break;
            case 25:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setGlobalPathAt(value);
                break;
            case 26:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setLeftFrontAt(value);
                break;
            case 27:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setRightFrontAt(value);
                break;
            case 28:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setLeftBehindAt(value);
                break;
            case 29:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setRightBehindAt(value);
                break;
            case 30:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setPlanningCmdAt(value);
                break;
            case 31:
                var value = new proto.OgmPoint();
                reader.readMessage(
                    value,
                    proto.OgmPoint.deserializeBinaryFromReader,
                );
                msg.addOgmPoints(value);
                break;
            case 32:
                var value = new proto.Object();
                reader.readMessage(
                    value,
                    proto.Object.deserializeBinaryFromReader,
                );
                msg.addObjects(value);
                break;
            case 33:
                var value = /** @type {string} */ (reader.readString());
                msg.setStateFlow(value);
                break;
            case 34:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setSoc(value);
                break;
            case 35:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setStop(value);
                break;
            case 36:
                var value = new proto.PlanningPoint();
                reader.readMessage(
                    value,
                    proto.PlanningPoint.deserializeBinaryFromReader,
                );
                msg.addPlanningPoints(value);
                break;
            case 37:
                var value = new proto.PlanningResult();
                reader.readMessage(
                    value,
                    proto.PlanningResult.deserializeBinaryFromReader,
                );
                msg.setPlanningResult(value);
                break;
            case 38:
                var value = /** @type {number} */ (reader.readDouble());
                msg.setUpdatedAt(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.World.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.World.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.World} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.World.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getCheId();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getX();
    if (f !== 0.0) {
        writer.writeDouble(2, f);
    }
    f = message.getY();
    if (f !== 0.0) {
        writer.writeDouble(3, f);
    }
    f = message.getYaw();
    if (f !== 0.0) {
        writer.writeDouble(4, f);
    }
    f = message.getOdometer();
    if (f !== 0.0) {
        writer.writeDouble(5, f);
    }
    f = message.getWheelSpeedList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            6,
            f,
            proto.WheelSpeed.serializeBinaryToWriter,
        );
    }
    f = message.getWheelOdometerList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            7,
            f,
            proto.WheelOdometer.serializeBinaryToWriter,
        );
    }
    f = message.getWheelAngleList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            8,
            f,
            proto.WheelAngle.serializeBinaryToWriter,
        );
    }
    f = message.getGy();
    if (f !== 0.0) {
        writer.writeDouble(9, f);
    }
    f = message.getCurrentThrottle();
    if (f !== 0.0) {
        writer.writeDouble(10, f);
    }
    f = message.getCurrentBrake();
    if (f !== 0.0) {
        writer.writeDouble(11, f);
    }
    f = message.getCurrentSpeed();
    if (f !== 0.0) {
        writer.writeDouble(12, f);
    }
    f = message.getTurnLightStatus();
    if (f !== 0) {
        writer.writeInt32(13, f);
    }
    f = message.getVehicleErrorStatus();
    if (f !== 0.0) {
        writer.writeDouble(14, f);
    }
    f = message.getEmergencyStopStatus();
    if (f !== 0.0) {
        writer.writeDouble(15, f);
    }
    f = message.getAutoDriverStatus();
    if (f !== 0) {
        writer.writeInt32(16, f);
    }
    f = message.getThrottle();
    if (f !== 0.0) {
        writer.writeDouble(17, f);
    }
    f = message.getBrake();
    if (f !== 0.0) {
        writer.writeDouble(18, f);
    }
    f = message.getGear();
    if (f.length > 0) {
        writer.writeString(19, f);
    }
    f = message.getFinalDistance();
    if (f !== 0.0) {
        writer.writeDouble(20, f);
    }
    f = message.getWallsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(21, f, proto.Wall.serializeBinaryToWriter);
    }
    f = message.getGpsStatus();
    if (f !== 0) {
        writer.writeInt32(22, f);
    }
    f = message.getRtSpeed();
    if (f !== 0.0) {
        writer.writeDouble(23, f);
    }
    f = message.getFinalSpeed();
    if (f !== 0.0) {
        writer.writeDouble(24, f);
    }
    f = message.getGlobalPathAt();
    if (f !== 0.0) {
        writer.writeDouble(25, f);
    }
    f = message.getLeftFrontAt();
    if (f !== 0.0) {
        writer.writeDouble(26, f);
    }
    f = message.getRightFrontAt();
    if (f !== 0.0) {
        writer.writeDouble(27, f);
    }
    f = message.getLeftBehindAt();
    if (f !== 0.0) {
        writer.writeDouble(28, f);
    }
    f = message.getRightBehindAt();
    if (f !== 0.0) {
        writer.writeDouble(29, f);
    }
    f = message.getPlanningCmdAt();
    if (f !== 0.0) {
        writer.writeDouble(30, f);
    }
    f = message.getOgmPointsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            31,
            f,
            proto.OgmPoint.serializeBinaryToWriter,
        );
    }
    f = message.getObjectsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            32,
            f,
            proto.Object.serializeBinaryToWriter,
        );
    }
    f = message.getStateFlow();
    if (f.length > 0) {
        writer.writeString(33, f);
    }
    f = message.getSoc();
    if (f !== 0.0) {
        writer.writeDouble(34, f);
    }
    f = message.getStop();
    if (f) {
        writer.writeBool(35, f);
    }
    f = message.getPlanningPointsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            36,
            f,
            proto.PlanningPoint.serializeBinaryToWriter,
        );
    }
    f = message.getPlanningResult();
    if (f != null) {
        writer.writeMessage(
            37,
            f,
            proto.PlanningResult.serializeBinaryToWriter,
        );
    }
    f = message.getUpdatedAt();
    if (f !== 0.0) {
        writer.writeDouble(38, f);
    }
};

/**
 * optional string che_id = 1;
 * @return {string}
 */
proto.World.prototype.getCheId = function () {
    return /** @type {string} */ (
        jspb.Message.getFieldWithDefault(this, 1, '')
    );
};

/**
 * @param {string} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setCheId = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional double x = 2;
 * @return {number}
 */
proto.World.prototype.getX = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setX = function (value) {
    return jspb.Message.setProto3FloatField(this, 2, value);
};

/**
 * optional double y = 3;
 * @return {number}
 */
proto.World.prototype.getY = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setY = function (value) {
    return jspb.Message.setProto3FloatField(this, 3, value);
};

/**
 * optional double yaw = 4;
 * @return {number}
 */
proto.World.prototype.getYaw = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setYaw = function (value) {
    return jspb.Message.setProto3FloatField(this, 4, value);
};

/**
 * optional double odometer = 5;
 * @return {number}
 */
proto.World.prototype.getOdometer = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setOdometer = function (value) {
    return jspb.Message.setProto3FloatField(this, 5, value);
};

/**
 * repeated WheelSpeed wheel_speed = 6;
 * @return {!Array<!proto.WheelSpeed>}
 */
proto.World.prototype.getWheelSpeedList = function () {
    return /** @type{!Array<!proto.WheelSpeed>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.WheelSpeed, 6)
    );
};

/**
 * @param {!Array<!proto.WheelSpeed>} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setWheelSpeedList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 6, value);
};

/**
 * @param {!proto.WheelSpeed=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WheelSpeed}
 */
proto.World.prototype.addWheelSpeed = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
        this,
        6,
        opt_value,
        proto.WheelSpeed,
        opt_index,
    );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.World} returns this
 */
proto.World.prototype.clearWheelSpeedList = function () {
    return this.setWheelSpeedList([]);
};

/**
 * repeated WheelOdometer wheel_odometer = 7;
 * @return {!Array<!proto.WheelOdometer>}
 */
proto.World.prototype.getWheelOdometerList = function () {
    return /** @type{!Array<!proto.WheelOdometer>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.WheelOdometer, 7)
    );
};

/**
 * @param {!Array<!proto.WheelOdometer>} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setWheelOdometerList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 7, value);
};

/**
 * @param {!proto.WheelOdometer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WheelOdometer}
 */
proto.World.prototype.addWheelOdometer = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
        this,
        7,
        opt_value,
        proto.WheelOdometer,
        opt_index,
    );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.World} returns this
 */
proto.World.prototype.clearWheelOdometerList = function () {
    return this.setWheelOdometerList([]);
};

/**
 * repeated WheelAngle wheel_angle = 8;
 * @return {!Array<!proto.WheelAngle>}
 */
proto.World.prototype.getWheelAngleList = function () {
    return /** @type{!Array<!proto.WheelAngle>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.WheelAngle, 8)
    );
};

/**
 * @param {!Array<!proto.WheelAngle>} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setWheelAngleList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 8, value);
};

/**
 * @param {!proto.WheelAngle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.WheelAngle}
 */
proto.World.prototype.addWheelAngle = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
        this,
        8,
        opt_value,
        proto.WheelAngle,
        opt_index,
    );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.World} returns this
 */
proto.World.prototype.clearWheelAngleList = function () {
    return this.setWheelAngleList([]);
};

/**
 * optional double gy = 9;
 * @return {number}
 */
proto.World.prototype.getGy = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setGy = function (value) {
    return jspb.Message.setProto3FloatField(this, 9, value);
};

/**
 * optional double current_throttle = 10;
 * @return {number}
 */
proto.World.prototype.getCurrentThrottle = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setCurrentThrottle = function (value) {
    return jspb.Message.setProto3FloatField(this, 10, value);
};

/**
 * optional double current_brake = 11;
 * @return {number}
 */
proto.World.prototype.getCurrentBrake = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setCurrentBrake = function (value) {
    return jspb.Message.setProto3FloatField(this, 11, value);
};

/**
 * optional double current_speed = 12;
 * @return {number}
 */
proto.World.prototype.getCurrentSpeed = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setCurrentSpeed = function (value) {
    return jspb.Message.setProto3FloatField(this, 12, value);
};

/**
 * optional int32 turn_light_status = 13;
 * @return {number}
 */
proto.World.prototype.getTurnLightStatus = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 13, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setTurnLightStatus = function (value) {
    return jspb.Message.setProto3IntField(this, 13, value);
};

/**
 * optional double vehicle_error_status = 14;
 * @return {number}
 */
proto.World.prototype.getVehicleErrorStatus = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setVehicleErrorStatus = function (value) {
    return jspb.Message.setProto3FloatField(this, 14, value);
};

/**
 * optional double emergency_stop_status = 15;
 * @return {number}
 */
proto.World.prototype.getEmergencyStopStatus = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setEmergencyStopStatus = function (value) {
    return jspb.Message.setProto3FloatField(this, 15, value);
};

/**
 * optional int32 auto_driver_status = 16;
 * @return {number}
 */
proto.World.prototype.getAutoDriverStatus = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 16, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setAutoDriverStatus = function (value) {
    return jspb.Message.setProto3IntField(this, 16, value);
};

/**
 * optional double throttle = 17;
 * @return {number}
 */
proto.World.prototype.getThrottle = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setThrottle = function (value) {
    return jspb.Message.setProto3FloatField(this, 17, value);
};

/**
 * optional double brake = 18;
 * @return {number}
 */
proto.World.prototype.getBrake = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setBrake = function (value) {
    return jspb.Message.setProto3FloatField(this, 18, value);
};

/**
 * optional string gear = 19;
 * @return {string}
 */
proto.World.prototype.getGear = function () {
    return /** @type {string} */ (
        jspb.Message.getFieldWithDefault(this, 19, '')
    );
};

/**
 * @param {string} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setGear = function (value) {
    return jspb.Message.setProto3StringField(this, 19, value);
};

/**
 * optional double final_distance = 20;
 * @return {number}
 */
proto.World.prototype.getFinalDistance = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setFinalDistance = function (value) {
    return jspb.Message.setProto3FloatField(this, 20, value);
};

/**
 * repeated Wall walls = 21;
 * @return {!Array<!proto.Wall>}
 */
proto.World.prototype.getWallsList = function () {
    return /** @type{!Array<!proto.Wall>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.Wall, 21)
    );
};

/**
 * @param {!Array<!proto.Wall>} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setWallsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 21, value);
};

/**
 * @param {!proto.Wall=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Wall}
 */
proto.World.prototype.addWalls = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
        this,
        21,
        opt_value,
        proto.Wall,
        opt_index,
    );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.World} returns this
 */
proto.World.prototype.clearWallsList = function () {
    return this.setWallsList([]);
};

/**
 * optional int32 gps_status = 22;
 * @return {number}
 */
proto.World.prototype.getGpsStatus = function () {
    return /** @type {number} */ (
        jspb.Message.getFieldWithDefault(this, 22, 0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setGpsStatus = function (value) {
    return jspb.Message.setProto3IntField(this, 22, value);
};

/**
 * optional double rt_speed = 23;
 * @return {number}
 */
proto.World.prototype.getRtSpeed = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 23, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setRtSpeed = function (value) {
    return jspb.Message.setProto3FloatField(this, 23, value);
};

/**
 * optional double final_speed = 24;
 * @return {number}
 */
proto.World.prototype.getFinalSpeed = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 24, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setFinalSpeed = function (value) {
    return jspb.Message.setProto3FloatField(this, 24, value);
};

/**
 * optional double global_path_at = 25;
 * @return {number}
 */
proto.World.prototype.getGlobalPathAt = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 25, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setGlobalPathAt = function (value) {
    return jspb.Message.setProto3FloatField(this, 25, value);
};

/**
 * optional double left_front_at = 26;
 * @return {number}
 */
proto.World.prototype.getLeftFrontAt = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 26, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setLeftFrontAt = function (value) {
    return jspb.Message.setProto3FloatField(this, 26, value);
};

/**
 * optional double right_front_at = 27;
 * @return {number}
 */
proto.World.prototype.getRightFrontAt = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 27, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setRightFrontAt = function (value) {
    return jspb.Message.setProto3FloatField(this, 27, value);
};

/**
 * optional double left_behind_at = 28;
 * @return {number}
 */
proto.World.prototype.getLeftBehindAt = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 28, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setLeftBehindAt = function (value) {
    return jspb.Message.setProto3FloatField(this, 28, value);
};

/**
 * optional double right_behind_at = 29;
 * @return {number}
 */
proto.World.prototype.getRightBehindAt = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 29, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setRightBehindAt = function (value) {
    return jspb.Message.setProto3FloatField(this, 29, value);
};

/**
 * optional double planning_cmd_at = 30;
 * @return {number}
 */
proto.World.prototype.getPlanningCmdAt = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 30, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setPlanningCmdAt = function (value) {
    return jspb.Message.setProto3FloatField(this, 30, value);
};

/**
 * repeated OgmPoint ogm_points = 31;
 * @return {!Array<!proto.OgmPoint>}
 */
proto.World.prototype.getOgmPointsList = function () {
    return /** @type{!Array<!proto.OgmPoint>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.OgmPoint, 31)
    );
};

/**
 * @param {!Array<!proto.OgmPoint>} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setOgmPointsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 31, value);
};

/**
 * @param {!proto.OgmPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.OgmPoint}
 */
proto.World.prototype.addOgmPoints = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
        this,
        31,
        opt_value,
        proto.OgmPoint,
        opt_index,
    );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.World} returns this
 */
proto.World.prototype.clearOgmPointsList = function () {
    return this.setOgmPointsList([]);
};

/**
 * repeated Object objects = 32;
 * @return {!Array<!proto.Object>}
 */
proto.World.prototype.getObjectsList = function () {
    return /** @type{!Array<!proto.Object>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.Object, 32)
    );
};

/**
 * @param {!Array<!proto.Object>} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setObjectsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 32, value);
};

/**
 * @param {!proto.Object=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Object}
 */
proto.World.prototype.addObjects = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
        this,
        32,
        opt_value,
        proto.Object,
        opt_index,
    );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.World} returns this
 */
proto.World.prototype.clearObjectsList = function () {
    return this.setObjectsList([]);
};

/**
 * optional string state_flow = 33;
 * @return {string}
 */
proto.World.prototype.getStateFlow = function () {
    return /** @type {string} */ (
        jspb.Message.getFieldWithDefault(this, 33, '')
    );
};

/**
 * @param {string} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setStateFlow = function (value) {
    return jspb.Message.setProto3StringField(this, 33, value);
};

/**
 * optional double soc = 34;
 * @return {number}
 */
proto.World.prototype.getSoc = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 34, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setSoc = function (value) {
    return jspb.Message.setProto3FloatField(this, 34, value);
};

/**
 * optional bool stop = 35;
 * @return {boolean}
 */
proto.World.prototype.getStop = function () {
    return /** @type {boolean} */ (
        jspb.Message.getBooleanFieldWithDefault(this, 35, false)
    );
};

/**
 * @param {boolean} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setStop = function (value) {
    return jspb.Message.setProto3BooleanField(this, 35, value);
};

/**
 * repeated PlanningPoint planning_points = 36;
 * @return {!Array<!proto.PlanningPoint>}
 */
proto.World.prototype.getPlanningPointsList = function () {
    return /** @type{!Array<!proto.PlanningPoint>} */ (
        jspb.Message.getRepeatedWrapperField(this, proto.PlanningPoint, 36)
    );
};

/**
 * @param {!Array<!proto.PlanningPoint>} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setPlanningPointsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 36, value);
};

/**
 * @param {!proto.PlanningPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PlanningPoint}
 */
proto.World.prototype.addPlanningPoints = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(
        this,
        36,
        opt_value,
        proto.PlanningPoint,
        opt_index,
    );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.World} returns this
 */
proto.World.prototype.clearPlanningPointsList = function () {
    return this.setPlanningPointsList([]);
};

/**
 * optional PlanningResult planning_result = 37;
 * @return {?proto.PlanningResult}
 */
proto.World.prototype.getPlanningResult = function () {
    return /** @type{?proto.PlanningResult} */ (
        jspb.Message.getWrapperField(this, proto.PlanningResult, 37)
    );
};

/**
 * @param {?proto.PlanningResult|undefined} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setPlanningResult = function (value) {
    return jspb.Message.setWrapperField(this, 37, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.World} returns this
 */
proto.World.prototype.clearPlanningResult = function () {
    return this.setPlanningResult(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.World.prototype.hasPlanningResult = function () {
    return jspb.Message.getField(this, 37) != null;
};

/**
 * optional double updated_at = 38;
 * @return {number}
 */
proto.World.prototype.getUpdatedAt = function () {
    return /** @type {number} */ (
        jspb.Message.getFloatingPointFieldWithDefault(this, 38, 0.0)
    );
};

/**
 * @param {number} value
 * @return {!proto.World} returns this
 */
proto.World.prototype.setUpdatedAt = function (value) {
    return jspb.Message.setProto3FloatField(this, 38, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.WorldMix.prototype.toObject = function (opt_includeInstance) {
        return proto.WorldMix.toObject(opt_includeInstance, this);
    };

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.WorldMix} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.WorldMix.toObject = function (includeInstance, msg) {
        var f,
            obj = {
                worldMsg:
                    (f = msg.getWorldMsg()) &&
                    proto.World.toObject(includeInstance, f),
                todayData:
                    (f = msg.getTodayData()) &&
                    proto.TodayData.toObject(includeInstance, f),
                job:
                    (f = msg.getJob()) &&
                    act_jobs_pb.ActJobs.toObject(includeInstance, f),
            };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WorldMix}
 */
proto.WorldMix.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.WorldMix();
    return proto.WorldMix.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WorldMix} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WorldMix}
 */
proto.WorldMix.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.World();
                reader.readMessage(
                    value,
                    proto.World.deserializeBinaryFromReader,
                );
                msg.setWorldMsg(value);
                break;
            case 2:
                var value = new proto.TodayData();
                reader.readMessage(
                    value,
                    proto.TodayData.deserializeBinaryFromReader,
                );
                msg.setTodayData(value);
                break;
            case 3:
                var value = new act_jobs_pb.ActJobs();
                reader.readMessage(
                    value,
                    act_jobs_pb.ActJobs.deserializeBinaryFromReader,
                );
                msg.setJob(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WorldMix.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.WorldMix.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WorldMix} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WorldMix.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getWorldMsg();
    if (f != null) {
        writer.writeMessage(1, f, proto.World.serializeBinaryToWriter);
    }
    f = message.getTodayData();
    if (f != null) {
        writer.writeMessage(2, f, proto.TodayData.serializeBinaryToWriter);
    }
    f = message.getJob();
    if (f != null) {
        writer.writeMessage(3, f, act_jobs_pb.ActJobs.serializeBinaryToWriter);
    }
};

/**
 * optional World world_msg = 1;
 * @return {?proto.World}
 */
proto.WorldMix.prototype.getWorldMsg = function () {
    return /** @type{?proto.World} */ (
        jspb.Message.getWrapperField(this, proto.World, 1)
    );
};

/**
 * @param {?proto.World|undefined} value
 * @return {!proto.WorldMix} returns this
 */
proto.WorldMix.prototype.setWorldMsg = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.WorldMix} returns this
 */
proto.WorldMix.prototype.clearWorldMsg = function () {
    return this.setWorldMsg(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WorldMix.prototype.hasWorldMsg = function () {
    return jspb.Message.getField(this, 1) != null;
};

/**
 * optional TodayData today_data = 2;
 * @return {?proto.TodayData}
 */
proto.WorldMix.prototype.getTodayData = function () {
    return /** @type{?proto.TodayData} */ (
        jspb.Message.getWrapperField(this, proto.TodayData, 2)
    );
};

/**
 * @param {?proto.TodayData|undefined} value
 * @return {!proto.WorldMix} returns this
 */
proto.WorldMix.prototype.setTodayData = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.WorldMix} returns this
 */
proto.WorldMix.prototype.clearTodayData = function () {
    return this.setTodayData(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WorldMix.prototype.hasTodayData = function () {
    return jspb.Message.getField(this, 2) != null;
};

/**
 * optional ActJobs job = 3;
 * @return {?proto.ActJobs}
 */
proto.WorldMix.prototype.getJob = function () {
    return /** @type{?proto.ActJobs} */ (
        jspb.Message.getWrapperField(this, act_jobs_pb.ActJobs, 3)
    );
};

/**
 * @param {?proto.ActJobs|undefined} value
 * @return {!proto.WorldMix} returns this
 */
proto.WorldMix.prototype.setJob = function (value) {
    return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.WorldMix} returns this
 */
proto.WorldMix.prototype.clearJob = function () {
    return this.setJob(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WorldMix.prototype.hasJob = function () {
    return jspb.Message.getField(this, 3) != null;
};

goog.object.extend(exports, proto);
